name: Terraform CI/CD with tfsec and SonarQube

on:
  push:
    branches: [main]
    paths:
      - 'user*/**'  # Triggers if any user folder changes
  workflow_dispatch:  # Manual trigger

jobs:
  detect-folders:
    runs-on: ubuntu-latest
    outputs:
      folders: ${{ steps.set-folders.outputs.folders }}
    steps:
      - uses: actions/checkout@v4
        with:
           fetch-depth: 0

      - id: set-folders
        run: |
          echo "Detecting user folders with changes..."
          folders=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^user' | cut -d/ -f1 | sort -u | uniq | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "folders=$folders" >> $GITHUB_OUTPUT

  run-ci:
    name: Run Terraform + tfsec per Folder
    needs: detect-folders
    runs-on: ubuntu-latest
    if: needs.detect-folders.outputs.folders != '[]'
    strategy:
      matrix:
        folder: ${{ fromJson(needs.detect-folders.outputs.folders) }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Zip Lambda Code if applicable
        run: |
          cd ${{ matrix.folder }}
          mkdir -p build
          zip -r build/test_lambda.zip . -x "*.tf" -x "*.tfvars" -x "build/*" -x ".terraform/*" || echo "No files to zip"

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ matrix.folder }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ matrix.folder }}

      - name: Terraform Plan
        run: terraform plan -var-file="vars/dev.tfvars"
        working-directory: ${{ matrix.folder }}

      - name: Install tfsec
        run: |
          curl -sSL https://github.com/aquasecurity/tfsec/releases/latest/download/tfsec-linux-amd64 -o tfsec
          chmod +x tfsec
          sudo mv tfsec /usr/local/bin/

      - name: Run tfsec
        run: tfsec --format json --out tfsec-results.json || true
        working-directory: ${{ matrix.folder }}

      - name: Upload tfsec results
        uses: actions/upload-artifact@v4
        with:
          name: tfsec-results-${{ matrix.folder }}
          path: ${{ matrix.folder }}/tfsec-results.json


      - name: Install SonarScanner
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner-cli-5.0.1.3006-linux.zip
          mv sonar-scanner-5.0.1.3006-linux sonar-scanner
          echo "$PWD/sonar-scanner/bin" >> $GITHUB_PATH

      - name: Run SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=htown-sp-sonarqube-${{ matrix.folder }} \
            -Dsonar.sources=${{ matrix.folder }} \
            -Dsonar.host.url=http://18.191.129.160:9000 \
            -Dsonar.login=$SONAR_TOKEN \
            | tee sonarqube-output.log || true
        

      - name: Fetch SonarQube Issues
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          curl -s -u "${SONAR_TOKEN}:" \
            "${SONAR_HOST_URL}/api/issues/search?componentKeys=htown-sp-sonarqube-${{ matrix.folder }}" \
            -o sonarqube-results.json || echo "Failed to fetch SonarQube issues"

      - name: Upload SonarQube Issues to S3
        run: |
          if [ -f sonarqube-results.json ]; then
            aws s3 cp sonarqube-results.json s3://sq-log-bucket/sonarqube/${{ matrix.folder }}/sonarqube-results.json
          else
            echo "Issues file not found, skipping upload."
          fi
